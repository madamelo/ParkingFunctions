

# This file was *autogenerated* from the file perm.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
def is_perm (L) :
    n = len (L)
    L2 = [i for i in (ellipsis_iter(_sage_const_1 ,Ellipsis,n))]
    return (L2 == sorted (L))

def is_cyclic (L) :
    if not is_perm (L) :
        return False

    n = len (L)
    
    if n == _sage_const_0  :
        return True

    C = [L [_sage_const_0 ]]
    tmp = L [_sage_const_0 ]
    for i in (ellipsis_iter(_sage_const_1 ,Ellipsis,n - _sage_const_1 )) :
        e = L [tmp - _sage_const_1 ]
        C.append (e)
        tmp = e
    
    Ls = sorted (L)
    Lc = sorted (C)

    return (Ls == Lc)

def blocs_perm (L) :
    if not is_perm (L) :
        return None
    S = []
    for i, e in enumerate (L) :
        s = [e]
        tmp = L [e - _sage_const_1 ]
        while (tmp != e) :
            s.append (tmp)
            tmp = L [tmp - _sage_const_1 ]
        S.append (s)
    R = []
    for b in S :
        if not set (b) in R :
            R.append (set (b))
    return R

def comp_perm (L1, L2) :
    if not is_perm (L1) :
        return None
    if not is_perm (L2) :
        return None

    P1 = Permutation (L1)
    P2 = Permutation (L2)
    P = P1.left_action_product (P2)

    return P

def inv_perm (L) :
    if not is_perm (L) :
        return None
    
    p = Permutation (L)
    return p.inverse ()

def generate_perm (n) :
    for P in Permutations (n) :
        yield P    

def code (L) :
    if not is_perm (L) :
        return None

    C = [_sage_const_0 ] * len (L)

    for i, e in enumerate (L) :
        cpt = _sage_const_0 
        for e2 in L [i+_sage_const_1  :] :
            if e2 < e :
                cpt = cpt + _sage_const_1 
        C [e - _sage_const_1 ] = cpt

    C.reverse ()
    return C

def couvre_perm (L1, L2) :
    if not is_perm (L1) :
        return False
    if not is_perm (L2) :
        return False
    
    c1 = code (L1)
    c2 = code (L2)

    if len (c1) != len (c2) :
        return False

    seen = False

    for e1, e2 in zip (c1, c2) :
        if e1 != e2 :
            if e1 == e2 + _sage_const_1  :
                if seen :
                    return False
                seen = True
            else :
                return False
    return seen


    

