

# This file was *autogenerated* from the file tests_cfp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_6 = Integer(6); _sage_const_0 = Integer(0)
sage.repl.load.load(sage.repl.load.base64.b64decode("Y2ZwLnNhZ2U="),globals(),False)

# TESTS CFP
print ("Tests CFP")

f1 = ParkingFunction ([_sage_const_5 , _sage_const_4 , _sage_const_1 , _sage_const_1 , _sage_const_3 , _sage_const_5 ])
f2 = ParkingFunction ([_sage_const_2 , _sage_const_1 , _sage_const_3 , _sage_const_3 , _sage_const_4 , _sage_const_6 ])
f3 = ParkingFunction ([_sage_const_5 , _sage_const_3 , _sage_const_4 , _sage_const_1 , _sage_const_2 , _sage_const_6 ])
L1 = [f1, f2, f3]
L2 = [f3, f1]
C1 = CFP (L1)
C2 = CFP (L2)
print (C1.is_k_cfp (_sage_const_3 ))
print (C1.is_k_cfp (_sage_const_2 ))
print (C2.is_k_cfp (_sage_const_2 ))

n = _sage_const_4 
k = _sage_const_2 
l = _sage_const_4 
g = generate_cfp (n, k, l)
kt = _sage_const_0 
for e in g :
    print (e)
    kt = kt + _sage_const_1 
print (kt)

def mpi (i) :
    if is_odd (i) :
        return - _sage_const_1 
    return _sage_const_1 

def stmp (a, b, n) :
    r = _sage_const_0 
    for i in (ellipsis_iter(a,Ellipsis,b)) :
        print (i, mpi (i), binomial (b, i))
        r = r + mpi (i) * binomial (b, i) * (b - i)**n
        print (r)
    return r

tmp1 = binomial (k * n, l)
tmp2 = stmp (_sage_const_0 , l + _sage_const_1 , n)
print (factorial (l), binomial (k * n, l), stirling_number2 (n, l + _sage_const_1 ))

