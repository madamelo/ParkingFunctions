

# This file was *autogenerated* from the file dpnc.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1)
sage.repl.load.load(sage.repl.load.base64.b64decode("cG5jLnNhZ2U="),globals(),False)

class DPNC :
    pi = None
    rho = None
    lam = None

    def __init__(self, pi, rho, lam) :
        self.pi = pi
        self.rho = rho
        self.lam = lam
    
    def is_dpnc (self) :
        pi = self.pi
        rho = self.rho
        lam = self.lam
        if not is_pnc (pi) :
            return False
        c1 = pi.cardinality ()
        c2 = rho.cardinality ()
        if c1 != c2 :
            return False
        for i in range (c1) :
            n = len (pi [i])
            m = len (rho [lam [i]])
            if n != m :
                return False
        return True

def generate_dpnc (n) :
    for pi in generate_pnc (n) :
        for rho in SetPartitions (n) :
            m = len (pi)
            for p in Permutations (m) :
                lam = { i : (p [i] - _sage_const_1 ) for i in range(m) }
                tmp = DPNC (pi, rho, lam)
                if tmp.is_dpnc () :
                    yield tmp
    
def couvre_dpnc (D1, D2) :
    if not D1.is_dpnc () :
        return False
    if not D2.is_dpnc () :
        return False

    pi1, rho1, lam1 = D1.pi, D1.rho, D1.lam
    pi2, rho2, lam2 = D2.pi, D2.rho, D2.lam
    if not couvre_pnc (pi1, pi2) :
        print (pi1, "ne couvre pas", pi2)
        return False
    if not couvre_part (rho1, rho2) :
        print (rho1, "ne couvre pas", rho2)
        return False
    
    for i2, b2 in enumerate (pi2) :
        d = []
        for i1, b1 in enumerate (pi1) :
            if is_subset (b1, b2) : 
                d = d + list (rho1 [lam1 [i1]])
        print (d)
        if d != rho2 [lam2 [i2]] :
            return False
    return True

