

# This file was *autogenerated* from the file fp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
sage.repl.load.load(sage.repl.load.base64.b64decode("ZHBuYy5zYWdl"),globals(),False)

def is_fp (L) :
    L2 = sorted (L)
    for i, b in enumerate (L2) :
        if b > (i + _sage_const_1 ) : 
            return False
    return True

def is_primitive (L) :
    if (is_fp (L)) :
        return (list (L) == sorted (L))
    return False

import itertools

def generate_fp (n) :
    for f in ParkingFunctions (n) :
        yield f

def generate_fpp (n) :
    for f in NonDecreasingParkingFunctions (n) :
        yield f

def couvre_fp (L1, L2) :
    return True

def perm_fp (P, L) :
    P2 = P.inverse ()
    R = []
    for i in range (len (L)) :
        R.append (L [P2 [i] - _sage_const_1 ])
    return R

def dpnc_to_fp (D) :
    pi, rho, lam = D.pi, D.rho, D.lam
    n = pi.base_set_cardinality ()
    L = [_sage_const_0 ] * n

    for i, B in enumerate (pi) :
        b = min (B)
        B2 = rho [lam [i]]
        for e in B2 :
            L [e] = b
    return L

