

# This file was *autogenerated* from the file fp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0)
def is_fp (L) :
    L2 = sorted (L)
    for i, b in enumerate (L2) :
        if b > (i + _sage_const_1 ) : 
            return False
    return True

L1 = [_sage_const_1 , _sage_const_2 , _sage_const_5 , _sage_const_6 , _sage_const_3 , _sage_const_3 ]
L2 = [_sage_const_3 , _sage_const_4 , _sage_const_1 , _sage_const_3 ]
print (is_fp (L1))
print (is_fp (L2))

import itertools
print (is_fp ([_sage_const_1 , _sage_const_1 , _sage_const_1 , _sage_const_2 ]))

def generate_fp (n) :
    t = (i for i in (ellipsis_iter(_sage_const_1 ,Ellipsis,n)))
    L = itertools.product (t, repeat = n)
    for e in L :
        if is_fp (e) :
            yield list (e)

g = generate_fp (_sage_const_5 )
k = _sage_const_0 
while True :
    try :
        print (g.send (None))
        k = k + _sage_const_1 
    except :
        break
print (k)
print (_sage_const_6 **_sage_const_4 )

def couvre_fp (L1, L2) :
    

