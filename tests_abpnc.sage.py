

# This file was *autogenerated* from the file tests_abpnc.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0); _sage_const_10 = Integer(10); _sage_const_7 = Integer(7)
sage.repl.load.load(sage.repl.load.base64.b64decode("YWJwbmMuc2FnZQ=="),globals(),False)
sage.repl.load.load(sage.repl.load.base64.b64decode("cmR5Y2suc2FnZQ=="),globals(),False)

# TESTS ABPNC
print ("Tests ABPNC")

P1 = SetPartition ([[_sage_const_1 , _sage_const_4 , _sage_const_6 ], [_sage_const_2 ], [_sage_const_3 ], [_sage_const_5 ]])
P2 = SetPartition ([[_sage_const_1 , _sage_const_3 ], [_sage_const_2 ], [_sage_const_4 , _sage_const_5 ], [_sage_const_6 ]])
Q1 = SetPartition ([[_sage_const_1 ], [_sage_const_2 , _sage_const_3 , _sage_const_4 ], [_sage_const_5 , _sage_const_6 ]])
print (mut_nc (P1, Q1))
print (mut_nc (P2, Q1))
print ()

b = _sage_const_4 
g = generate_mut (b)
k = _sage_const_0 
for e in g :
    print (e)
    k = k + _sage_const_1 
print (k)
print ()

A1 = ABPNC (_sage_const_10 , _sage_const_7 , P1, Q1)
A2 = ABPNC (_sage_const_10 , _sage_const_7 , P2, Q1)
print (A1.is_abpnc ())
print (A2.is_abpnc ())
print ()

a3 = _sage_const_10 
b3 = _sage_const_7 
p3 = [_sage_const_1 , _sage_const_1 , _sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_1 , _sage_const_1 , _sage_const_0 , _sage_const_1 , _sage_const_1 , _sage_const_0 , _sage_const_1 , _sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_0 ]
R3 = RDYCK (a3, b3, p3)
P3, _ = P (R3)
Q3, _ = Q (R3)
A3 = ABPNC (a3, b3, P3, Q3)
print (A3.is_abpnc ())
print ()

a = _sage_const_3 
b = _sage_const_4 
g = generate_abpnc (a, b)
k = _sage_const_0 
for e, lp, lq in g :
    print (e.P, e.Q, lp, lq)
    s = _sage_const_0 
    for e in lp :
        s = s + lp [e]
    for e in lq :
        s = s + lq [e]
    print (s, s == a)
    k = k + _sage_const_1 
print (k)
print ((_sage_const_1  / (a + b)) * binomial (a + b, a))
print ()

A4 = abrot (A1)
print (A4.P, A4.Q)
print (A4.is_abpnc ())

